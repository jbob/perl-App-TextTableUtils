#!perl

# DATE
# VERSION

use 5.010001;
use strict;
use warnings;

my ($ifmt, $ofmt) = $0 =~ /(\w+)2(\w+)\z/ or die "Please call me as <foo>2<bar> (not $0)";

# parse options
my %Opts;
{
    require Getopt::Long;
    Getopt::Long::Configure("bundling", "no_ignore_case", "permute", "no_getopt_compat");
    Getopt::Long::GetOptions(
        "backend|b=s" => \$Opts{backend},
    ) or die "$0: Error in getting options, bailing out\n";
}

# get input handle
my $fh;
{
    if (@ARGV == 1) {
        open $fh, "<:encoding(utf8)", $ARGV[0] or die "Can't open $ARGV[0]: $!";
    } elsif (!@ARGV) {
        binmode(STDIN, ":encoding(utf8)");
        $fh = \*STDIN;
    } else {
        die "Usage: $0 <filename>\n";
    }
}

my $rows;
# parse input into rows
{
    if ($ifmt eq 'csv') {
        require Text::CSV;
        my $csv = Text::CSV->new({ binary => 1 })
            or die "Cannot use CSV: ".Text::CSV->error_diag;
        $rows = [];
        while ( my $row = $csv->getline($fh) ) {
            push @$rows, $row;
        }
        $csv->eof or $csv->error_diag();
    } elsif ($ifmt eq 'tsv') {
        $rows = [];
        while (my $row = <$fh>) {
            chomp $row;
            push @$rows, [split /\t/, $row];
        }
    } elsif ($ifmt eq 'json') {
        require Data::Check::Structure;
        require JSON::MaybeXS;
        local $/;
        $rows = JSON::MaybeXS::decode_json(scalar <$fh>);
        die "Input data is not an array-of-arrays-of scalars"
            unless Data::Check::Structure::is_aoaos($rows);
    } elsif ($ifmt eq 'dd') {
        require Data::Check::Structure;
        local $/;
        $rows = eval scalar <$fh>;
        die if $@;
        die "Input data is not an array-of-arrays-of scalars"
            unless Data::Check::Structure::is_aoaos($rows);
    } else {
        die "Unknown input format '$ifmt'";
    }
}

# format as output
{
    if ($ofmt eq 'dd') {
        no warnings 'once';
        require Data::Dumper;
        $Data::Dumper::Indent = 0;
        $Data::Dumper::Terse  = 1;
        # produce nicer, one-row-at-a-line output
        print "[\n";
        for (@$rows) {
            print "    ", Data::Dumper::Dumper($_), ",\n";
        }
        print "]\n";
    } elsif ($ofmt eq 'json') {
        require JSON::MaybeXS;
        # produce nicer, one-row-at-a-line output
        print "[\n";
        for (0..$#{$rows}) {
            print "  ", JSON::MaybeXS::encode_json($rows->[$_]),
            ($_ == $#{$rows} ? "" : ","), "\n";
        }
        print "]\n";
    } elsif ($ofmt eq 'texttable') {
        require Text::Table::Any;
        print Text::Table::Any::table(
            rows => $rows, backend => $Opts{backend});
    } elsif ($ofmt eq 'csv') {
        require Text::Table::Any;
        require Text::Table::CSV;
        print Text::Table::Any::table(
            rows => $rows, backend => 'Text::Table::CSV');
    } elsif ($ofmt eq 'tsv') {
        require Text::Table::Any;
        require Text::Table::TSV;
        print Text::Table::Any::table(
            rows => $rows, backend => 'Text::Table::TSV');
    } elsif ($ofmt eq 'ansitable') {
        require Text::Table::Any;
        require Text::ANSITable;
        print Text::Table::Any::table(
            rows => $rows, backend => 'Text::ANSITable');
    } elsif ($ofmt eq 'asciitable') {
        require Text::Table::Any;
        require Text::ASCIITable;
        print Text::Table::Any::table(
            rows => $rows, backend => 'Text::ASCIITable');
    } elsif ($ofmt eq 'mdtable') {
        require Text::Table::Any;
        require Text::MarkdownTable;
        print Text::Table::Any::table(
            rows => $rows, backend => 'Text::MarkdownTable');
    } elsif ($ofmt eq 'orgtable') {
        require Text::Table::Any;
        require Text::Table::Org;
        print Text::Table::Any::table(
            rows => $rows, backend => 'Text::Table::Org');
    } else {
        die "Unknown output format '$ofmt'";
    }
}

# ABSTRACT: Convert/render {CSV,TSV,JSON/Perl array-of-arrays} into {CSV/TSV/JSON/Perl/text tables}
# PODNAME:

=head1 SYNOPSIS

The distribution App-TextTableUtils provides the following CLIs:

#INSERT_EXECS_LIST

Some examples for using the scripts:

To render CSV as Org table:

 % csv2orgtable TABLE.CSV

To render CSV as JSON:

 % csv2json < TABLE.CSV

To render TSV as a text table (using L<Text::Table::Any>) with LTSV backend:

 % echo "SELECT * FROM table1" | mysql DBNAME | tsv2texttable -b Text::Table::LTSV


=head1 SEE ALSO

L<App::texttable>, L<texttable>
